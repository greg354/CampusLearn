@model CampusLearnPlatform.Models.ViewModels.ComposeMessageViewModel
@{
    ViewData["Title"] = "New Message";
}

<style>
    /* CSS Variables for Theming */
    :root {
        --conversation-bg: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
        --message-sent-bg: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        --message-received-bg: white;
        --message-text: #333;
        --message-footer-text: #6b7280;
        --card-bg: white;
        --card-header-bg: #f8f9fa;
        --card-text: #333;
        --card-border: #e2e8f0;
        --input-bg: white;
        --input-border: #e2e8f0;
        --input-text: #333;
        --search-result-bg: white;
        --search-result-hover: #f8f9fa;
        --search-result-text: #333;
    }

    [data-theme="dark"] {
        --conversation-bg: linear-gradient(135deg, #1a1a1a 0%, #2d3748 100%);
        --message-sent-bg: linear-gradient(135deg, #6366f1 0%, #8b5cf6 100%);
        --message-received-bg: #4a5568;
        --message-text: #e2e8f0;
        --message-footer-text: #a0aec0;
        --card-bg: #2d3748;
        --card-header-bg: #4a5568;
        --card-text: #e2e8f0;
        --card-border: #4a5568;
        --input-bg: #4a5568;
        --input-border: #4a5568;
        --input-text: #e2e8f0;
        --search-result-bg: #4a5568;
        --search-result-hover: #2d3748;
        --search-result-text: #e2e8f0;
    }

    .search-results {
        background: var(--search-result-bg) !important;
        color: var(--search-result-text);
        border: 1px solid var(--card-border);
    }

    .search-result-item {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid var(--card-border);
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

        .search-result-item:hover {
            background: var(--search-result-hover);
        }

        .search-result-item:last-child {
            border-bottom: none;
        }

    .conversation-body {
        background: var(--conversation-bg);
        border-left: 1px solid var(--card-border);
        border-right: 1px solid var(--card-border);
    }

    .message-bubble {
        max-width: 70%;
        padding: 0.75rem 1rem;
        border-radius: 1rem;
        position: relative;
        animation: fadeIn 0.3s ease-in;
    }

        .message-bubble.sent {
            background: var(--message-sent-bg);
            color: white;
            margin-left: auto;
            border-bottom-right-radius: 0.25rem;
        }

        .message-bubble.received {
            background: var(--message-received-bg);
            color: var(--message-text);
            margin-right: auto;
            border-bottom-left-radius: 0.25rem;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    /* Ultra Thin Elongated Pill  */
    .input-group {
        border-radius: 1.25rem !important;
        border: 1px solid var(--input-border);
        background: var(--input-bg);
        padding: 0.4rem 0.6rem 0.4rem 0.8rem;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        min-height: 40px; 
    }

    .input-group:focus-within {
        border-color: #6366f1;
        box-shadow: 0 0 0 0.1rem rgba(99, 102, 241, 0.15);
    }

    .message-input {
        border: none !important;
        background: transparent !important;
        resize: none;
        color: var(--input-text);
        padding: 0.4rem 0.4rem;
        box-shadow: none !important;
        font-size: 0.875rem;
        line-height: 1.3;
        flex-grow: 1;
        min-height: 35px; 
        max-height: 120px; 
        margin: 0;
        overflow-y: auto; 
    }

    .send-button {
        border-radius: 50% !important;
        width: 35px !important;
        height: 35px !important;
        margin: 0 !important;
        margin-left: 0.3rem !important;
        font-size: 0.7rem;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        align-self: center;
        border: none;
    }

    .send-button:not(:disabled):hover {
        transform: scale(1.03);
    }

    .send-button:disabled {
        background-color: #9ca3af !important;
        border-color: #9ca3af !important;
        cursor: not-allowed;
        transform: none;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card">
                <div class="card-header bg-light d-flex align-items-center">
                    <a href="@Url.Action("Index")" class="btn btn-outline-secondary btn-sm me-3">
                        <i class="fas fa-arrow-left"></i>
                    </a>
                    <div class="flex-grow-1">
                        <h5 class="mb-0">New Message</h5>
                    </div>
                </div>

                <!-- Recipient Search Section -->
                <div class="card-body border-bottom">
                    <div class="mb-4">
                        <label class="form-label fw-semibold">To:</label>
                        <div class="search-container position-relative">
                            <input type="text"
                                   class="form-control form-control-lg"
                                   id="recipientSearch"
                                   placeholder="Search for a user by name or email..."
                                   autocomplete="off">
                            <div class="search-results position-absolute w-100 bg-white shadow-lg rounded mt-1"
                                 style="display: none; z-index: 1000; max-height: 300px; overflow-y: auto;">
                                <!-- Search results appear here -->
                            </div>
                        </div>
                    </div>

                    <!-- Selected Recipient -->
                    <div id="selectedRecipient" class="alert alert-info mb-0" style="display: none;">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong id="selectedUserName"></strong>
                                <span id="selectedUserRole" class="text-muted ms-2"></span>
                            </div>
                            <button type="button" class="btn-close" id="clearSelection"></button>
                        </div>
                    </div>
                </div>

                <!-- Conversation Area -->
                <div id="conversationArea" style="display: none;">
                    <!-- Messages Container -->
                    <div class="card-body conversation-body" style="height: 50vh; overflow-y: auto;">
                        <div id="messagesContainer">
                            <!-- Messages will be loaded here -->
                        </div>
                    </div>

                    <!-- Message Input -->
                    <div class="card-footer" style="padding-top: 0.25rem; padding-bottom: 0.25rem;">
                        <form id="messageForm" asp-action="SendMessage" method="post" class="message-form">
                            @Html.AntiForgeryToken()
                            <input type="hidden" id="receiverId" name="ReceiverId" />
                            <div class="input-group">
                                <textarea id="messageContent"
                                          name="Content"
                                          class="form-control message-input"
                                          rows="2"
                                          placeholder="Type your message..."
                                          maxlength="1000"
                                          required></textarea>
                                <button type="submit" class="btn btn-primary send-button" disabled>
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                            <div class="mt-2 d-flex justify-content-between align-items-center" style="margin-top: 0.25rem !important;">
                                <small class="text-muted">
                                    <span class="char-count">0</span>/1000 characters
                                </small>
                                <small class="text-info">
                                    <i class="fas fa-shield-alt me-1"></i>
                                    Private conversation
                                </small>
                            </div>
                        </form>
                    </div>
                </div>

                <!-- Empty State -->
                <div id="emptyState" class="card-body text-center py-5">
                    <i class="fas fa-comments text-muted mb-3" style="font-size: 3rem;"></i>
                    <h5 class="text-muted">Select a recipient to start messaging</h5>
                    <p class="text-muted">Search for a user above to begin your conversation</p>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        console.log('Compose DOMContentLoaded event fired');

        const recipientSearch = document.getElementById('recipientSearch');
        const searchResults = document.querySelector('.search-results');
        const selectedRecipient = document.getElementById('selectedRecipient');
        const conversationArea = document.getElementById('conversationArea');
        const emptyState = document.getElementById('emptyState');
        const receiverId = document.getElementById('receiverId');
        const messageContent = document.getElementById('messageContent');
        const sendButton = document.querySelector('.send-button');
        const charCount = document.querySelector('.char-count');
        const messageForm = document.getElementById('messageForm');
        const selectedUserName = document.getElementById('selectedUserName');
        const selectedUserRole = document.getElementById('selectedUserRole');
        const clearSelection = document.getElementById('clearSelection');

        console.log('Compose elements found:', {
            messageContent: !!messageContent,
            sendButton: !!sendButton,
            charCount: !!charCount
        });

        if (!messageContent) {
            console.error('messageContent element not found!');
            return;
        }

        let searchTimeout;

        // Search functionality
        if (recipientSearch) {
            recipientSearch.addEventListener('input', function () {
                const query = this.value.trim();
                clearTimeout(searchTimeout);

                if (query.length < 2) {
                    if (searchResults) searchResults.style.display = 'none';
                    return;
                }

                searchTimeout = setTimeout(() => {
                    searchUsers(query);
                }, 300);
            });
        }

        // Clear selection
        if (clearSelection) {
            clearSelection.addEventListener('click', function () {
                clearRecipientSelection();
            });
        }

        // Set initial height
        messageContent.style.height = '35px';
        console.log('Compose initial height set to 35px');

        messageContent.addEventListener('input', function () {
            console.log('Compose input event triggered');
            const length = this.value.length;

            if (charCount) {
                charCount.textContent = length;
            }

            if (sendButton) {
                sendButton.disabled = length === 0 || length > 1000;
            }

            // Better auto-expand logic
            // First reset to a small height to get accurate scrollHeight
            this.style.height = '35px';

            // Now calculate the actual needed height
            const neededHeight = this.scrollHeight;
            console.log('Compose needed height:', neededHeight);

            // Only expand if we actually need more than 35px
            let newHeight;
            if (neededHeight > 35) {
                newHeight = Math.min(neededHeight, 120);
                this.style.height = newHeight + 'px';
                console.log('Compose textarea expanded to:', newHeight + 'px');
            } else {
                newHeight = 35;
                this.style.height = '35px';
                console.log('Compose textarea kept at minimum 35px');
            }

            // Adjust container height if needed
            const inputGroup = this.closest('.input-group');
            if (inputGroup) {
                inputGroup.style.minHeight = Math.max(32, newHeight + 8) + 'px';
            }
        });

        // Form submission
        if (messageForm) {
            messageForm.addEventListener('submit', function (e) {
                e.preventDefault();
                sendMessage();
            });
        }

        function searchUsers(query) {
            fetch(`@Url.Action("SearchUsers", "Message")?query=${encodeURIComponent(query)}`)
                .then(response => response.json())
                .then(users => {
                    displaySearchResults(users);
                })
                .catch(error => {
                    console.error('Search error:', error);
                });
        }

        function displaySearchResults(users) {
            if (!searchResults) return;

            searchResults.innerHTML = '';

            if (users.length === 0) {
                searchResults.innerHTML = '<div class="search-result-item text-muted">No users found</div>';
            } else {
                users.forEach(user => {
                    const resultItem = document.createElement('div');
                    resultItem.className = 'search-result-item';
                    resultItem.innerHTML = `
                        <div class="fw-semibold">${user.text}</div>
                        <small class="text-muted">${user.role || 'User'}</small>
                    `;
                    resultItem.addEventListener('click', () => {
                        selectRecipient(user);
                    });
                    searchResults.appendChild(resultItem);
                });
            }

            searchResults.style.display = 'block';
        }

        function selectRecipient(user) {
            // Update UI
            if (selectedUserName) selectedUserName.textContent = user.text;
            if (selectedUserRole) selectedUserRole.textContent = user.role ? `(${user.role})` : '';
            if (receiverId) receiverId.value = user.id;

            // Show/hide sections
            if (selectedRecipient) selectedRecipient.style.display = 'block';
            if (conversationArea) conversationArea.style.display = 'block';
            if (emptyState) emptyState.style.display = 'none';
            if (searchResults) searchResults.style.display = 'none';
            if (recipientSearch) recipientSearch.value = '';

            // Load conversation history
            loadConversationHistory(user.id);

            // Focus message input
            if (messageContent) messageContent.focus();
        }

        function clearRecipientSelection() {
            if (selectedRecipient) selectedRecipient.style.display = 'none';
            if (conversationArea) conversationArea.style.display = 'none';
            if (emptyState) emptyState.style.display = 'block';
            if (receiverId) receiverId.value = '';
            if (messageContent) {
                messageContent.value = '';
                messageContent.dispatchEvent(new Event('input'));
            }
            if (recipientSearch) recipientSearch.focus();
        }

        function loadConversationHistory(userId) {
            fetch(`@Url.Action("GetConversation", "Message")?otherUserId=${userId}`)
                .then(response => response.json())
                .then(conversation => {
                    displayMessages(conversation.messages || []);
                })
                .catch(error => {
                    console.error('Error loading conversation:', error);
                    displayMessages([]);
                });
        }

        function displayMessages(messages) {
            const messagesContainer = document.getElementById('messagesContainer');
            if (!messagesContainer) return;

            if (messages.length === 0) {
                messagesContainer.innerHTML = `
                    <div class="text-center py-5 text-muted">
                        <i class="fas fa-comments fa-3x mb-3"></i>
                        <h5>No messages yet</h5>
                        <p>Send the first message to start your conversation</p>
                    </div>
                `;
            } else {
                messagesContainer.innerHTML = messages.map(message => `
                    <div class="message-bubble ${message.isSentByCurrentUser ? 'sent' : 'received'} mb-3">
                        <div class="message-content">
                            <div class="message-text">
                                <p class="mb-1">${message.content}</p>
                            </div>
                            <div class="message-footer d-flex justify-content-between align-items-center mt-1">
                                <small class="text-muted">${new Date(message.timestamp).toLocaleString()}</small>
                                ${message.isSentByCurrentUser ? `
                                    <div class="message-status">
                                        ${message.isRead ?
                                            '<i class="fas fa-check-double text-primary" title="Read"></i>' :
                                            '<i class="fas fa-check text-muted" title="Sent"></i>'
                                        }
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `).join('');

                // Scroll to bottom
                const conversationBody = document.querySelector('.conversation-body');
                if (conversationBody) {
                    conversationBody.scrollTop = conversationBody.scrollHeight;
                }
            }
        }

    function sendMessage() {
        const content = messageContent.value.trim();
        if (content === '' || content.length > 1000) return;
        function sendMessage() {
            if (!messageContent || !receiverId) return;

            const content = messageContent.value.trim();
            if (content === '' || content.length > 1000) {
                return;
            }

        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';

        sendButton.disabled = true;
        sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            // Disable send button and show loading
            if (sendButton) {
                sendButton.disabled = true;
                sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
            }

        fetch(messageForm.action, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest',
                'RequestVerificationToken': token // for extra safety
            },
            body: new URLSearchParams(new FormData(messageForm))
        })
        .then(async (response) => {
            // Our controller returns JSON on AJAX
            const data = await response.json().catch(() => ({}));
            if (response.ok && data.success) {
                messageContent.value = '';
                messageContent.dispatchEvent(new Event('input'));
                loadConversationHistory(receiverId.value);
            } else {
                const msg = data.error || 'Failed to send message. Please try again.';
                throw new Error(msg);
            }
        })
        .catch(err => {
            console.error('Error sending message:', err);
            alert(err.message);
        })
        .finally(() => {
            sendButton.disabled = false;
            sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
        });
    }
            fetch(messageForm.action, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: new URLSearchParams(new FormData(messageForm))
            })
            .then(response => {
                if (response.ok) {
                    messageContent.value = '';
                    messageContent.dispatchEvent(new Event('input'));
                    loadConversationHistory(receiverId.value);
                } else {
                    throw new Error('Failed to send message');
                }
            })
            .catch(error => {
                console.error('Error sending message:', error);
                alert('Failed to send message. Please try again.');
            })
            .finally(() => {
                if (sendButton) {
                    sendButton.disabled = false;
                    sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
                }
            });
        }


        // Close search results when clicking outside
        document.addEventListener('click', function (e) {
            if (recipientSearch && searchResults &&
                !recipientSearch.contains(e.target) && !searchResults.contains(e.target)) {
                searchResults.style.display = 'none';
            }
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function (e) {
            if (e.ctrlKey && e.key === 'Enter' && receiverId && receiverId.value) {
                if (messageForm) {
                    messageForm.dispatchEvent(new Event('submit'));
                }
            }
        });

        console.log('Compose all event listeners attached successfully');
    });
</script>